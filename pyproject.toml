[tool.poetry]
name          = "poethepoet"
version       = "0.27.0"
description   = "A task runner that works well with poetry."
authors       = ["Nat Noordanus <n@noordan.us>"]
readme        = "README.md"
license       = "MIT"
repository    = "https://github.com/nat-n/poethepoet"
homepage      = "https://github.com/nat-n/poethepoet"
documentation = "https://poethepoet.natn.io/"
keywords      = ["automation", "tasks", "task-runner", "plugin", "poetry", "poe"]
classifiers   = ["Topic :: Software Development :: Build Tools"]

[tool.poetry.dependencies]
python = ">=3.8"
pastel = "^0.2.1"
tomli  = ">=1.2.2"
poetry = {version = "^1.0", allow-prereleases = true, optional = true}

[tool.poetry.group.ci.dependencies]
black      = "^23.3.0"
mypy       = "^1.1.1"
pytest     = "^7.1.2"
pytest-cov = "^3.0.0"
rstcheck   = { version = "^6.1.2", python = "<4" }
ruff       = "^0.0.291"

virtualenv = "^20.14.1"

poe_test_helpers = { path = "./tests/fixtures/packages/poe_test_helpers" }

[tool.poetry.group.dev.dependencies]
bpython    = "^0.24"

[tool.poetry.group.docs.dependencies]
furo                = "^2023.3.27"
livereload          = "^2.6.3"
sphinx              = "^6.1.3"
sphinx-copybutton   = "^0.5.1"
sphinxext-opengraph = "^0.9.0"

[tool.poetry.extras]
poetry_plugin = ["poetry"]

[tool.poetry.scripts]
poe = "poethepoet:main"

[tool.poetry.plugins."poetry.application.plugin"]
poethepoet = "poethepoet.plugin:PoetryPlugin"


[tool.poe.tasks]

_clean_docs.script = "shutil:rmtree('docs/_build', ignore_errors=1)"

  [tool.poe.tasks.format]
  help     = "Run all formatting tools on the code base"
  sequence = ["format-ruff", "format-black"]

  [tool.poe.tasks.format-ruff]
  help = "Run ruff fixer on code base"
  cmd  = "ruff check . --fix-only"

  [tool.poe.tasks.format-black]
  help = "Run black on the code base"
  cmd  = "black ."

  [tool.poe.tasks.docs]
  help = "Build the docs using Sphinx"
  cmd  = "sphinx-build docs docs/_build"
  deps = ["_clean_docs"]

  [tool.poe.tasks.docs-serve]
  help   = "Serves the docs locally with livereload"
  script = "docs:serve"
  cwd    = "./docs"
  deps   = ["docs"]

  [tool.poe.tasks.docs-check]
  help = "Validate rst syntax in the docs"
  sequence = [
    { cmd  = "rstcheck -r docs --ignore-roles bash,toml,sh,python --ignore-substitutions V" },
    "docs -b linkcheck"
  ]

  [tool.poe.tasks.clean]
  help = "Remove generated files"
  cmd  = """
    # multiline commands including comments work too!
    rm -rf .coverage
           .mypy_cache
           .pytest_cache
           ./**/__pycache__
           dist
           htmlcov
           ./docs/_build
           ./tests/fixtures/simple_project/venv
           ./tests/fixtures/venv_project/myvenv
           ./tests/fixtures/poetry_plugin_project/**/.venv
           ./tests/temp
  """

  [tool.poe.tasks.test]
  help = "Run unit and feature tests"
  cmd  = "pytest"

  [tool.poe.tasks.test-quick]
  help = "Run unit and feature tests, excluding slow ones"
  cmd  = "pytest -m 'not slow'"

  [tool.poe.tasks.types]
  help = "Run the type checker"
  cmd  = "mypy poethepoet --ignore-missing-imports"

  [tool.poe.tasks.lint]
  help = "Run linting tools on the code base"
  cmd  = "ruff check ."

  [tool.poe.tasks.style]
  help = "Validate black code style"
  cmd  = "black . --check --diff"

  [tool.poe.tasks.check]
  help     = "Run all checks on the code base"
  sequence = ["docs-check", "style", "types", "lint", "test"]

  [tool.poe.tasks.install-poetry-plugin]
  help = "Install or update this project as a plugin in poetry"
  sequence = [
    { cmd = "poetry self remove poethepoet"},
    { cmd = "poetry self add \"${POE_ROOT}[poetry_plugin]\""}
  ]
  ignore_fail = true

  [tool.poe.tasks.poe]
  help   = "Execute poe from this repo (useful for testing)"
  script = "poethepoet:main"


[tool.rstcheck]
ignore_messages  = [
  "Unknown directive type \"autoclass\"",
  "Hyperlink target \"shell-completion\" is not referenced.",
  "Hyperlink target \"envfile-option\" is not referenced.",
  "Hyperlink target \"ref-env-vars\" is not referenced.",
  "Hyperlink target \"sequence-composition\" is not referenced.",
  "Hyperlink target \"graph-composition\" is not referenced.",
  "No directive entry for \"autoclass\" in module \"docutils.parsers.rst.languages.en\""
]
ignore_directives = [
  "include"
]


[tool.coverage.report]
omit = ["**/site-packages/**", "poethepoet/completion/*", "poethepoet/plugin.py"]


[tool.pytest.ini_options]
markers = [
  "slow: marks tests as slow (deselect with '-m \"not slow\"')"
]


[tool.ruff]
select  = [
  "E",     # error
  "F",     # pyflakes
  "I",     # isort
  "W",     # warning
  "N",     # pep8-naming
  "UP",    # pyupgrade
  "YTT",   # flake8-2020
  "ASYNC", # flake8-async
  "C4",    # flake8-comprehensions
  "T10",   # flake8-debugger
  "G",     # flake8-logging-format
  "PIE",   # flake8-pie
  "PYI",   # flake8-pyi
  "PT",    # flake8-pytest-style
  "Q",     # flake8-quotes
  "SIM",   # flake8-simplify
  "TCH",   # flake8-type-checking
  "PTH",   # flake8-use-pathlib
  "PGH",   # pygrep-hooks
  "PERF",  # perflint
  "RUF",   # ruff-specific rules
]
ignore  = [
  "C408",   # unnecessary-collection-call
  "PT015",  # pytest-assert-always-false
  "SIM118", # in-dict-keys
  "PTH109", # os-getcwd
  "PTH123", # builtin-open
  "RUF012", # mutable-class-default
]
fixable = ["E", "F", "I"]


[build-system]
requires      = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
