[tool.poetry]
name = "poethepoet"
version = "0.11.0b6"
description = "A task runner that works well with poetry."
authors = ["Nat Noordanus <n@natn.me>"]
readme = "README.rst"
license = "MIT"
repository =  "https://github.com/nat-n/poethepoet"
homepage =  "https://github.com/nat-n/poethepoet"

[tool.poetry.dependencies]
python = "^3.6"
pastel = "^0.2.0"
tomli = "^1.0.0"

[tool.poetry.dev-dependencies]
black = "^19.10b0"
bpython = "^0.19"
mypy = "^0.770"
pylint = "^2.5.2"
pytest = "^5.2"
pytest-cov = "^2.9.0"
tox = "^3.15.2"
rstcheck = "^3.3.1"

[tool.poetry.scripts]
poe = "poethepoet:main"

[tool.poe.tasks]
# Dev actions
format = { cmd = "black .", help = "Run black on the code base" }
clean = """
  # multiline commands including comments work too!
  rm -rf .coverage
         .mypy_cache
         .pytest_cache
         ./**/__pycache__
         dist
         htmlcov
         ./tests/fixtures/simple_project/venv
         ./tests/fixtures/venv_project/myvenv
"""
# Code quality checks
test = "pytest --cov=poethepoet"
types = "mypy poethepoet --ignore-missing-imports"
lint = "pylint poethepoet"
style = "black . --check --diff"
check-docs = "rstcheck README.rst"
# Run all checks on the code base
check = ["check-docs", "style", "types", "lint", "test"]
# poeception
poe = { script = "poethepoet:main", help = "Execute poe from this repo (useful for testing)" }

[tool.tox]
legacy_tox_ini = """
[tox]
isolated_build = true
envlist = py36, py37, py38
[testenv]
whitelist_externals = poetry
commands =
    poetry install -v
    poe test
"""

[tool.coverage.report]
omit=["**/site-packages/**"]

[build-system]
requires = ["poetry>=0.12"]
build-backend = "poetry.masonry.api"
