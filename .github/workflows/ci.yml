name: CI

on: [push, pull_request]

jobs:

  code-quality:
    name: Check coding standards
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install poetry
        run: pipx install poetry

      - uses: actions/setup-python@v4
        with:
          python-version: 3.11
          cache: poetry

      - name: Install dependencies
        run: poetry install --without dev

      - name: Check code formatting
        run: poetry run poe style

      - name: Run linter
        run: poetry run poe lint

      - name: Check types
        run: poetry run poe types

      - name: Check rst syntax
        run: poetry run poe docs-check

  run-tests:
    name: Run tests
    strategy:
      matrix:
        os: [Ubuntu, MacOS, Windows]
        python-version: ['3.8', '3.9', '3.10', '3.11']
        exclude: # TODO: remove this when pip is fixed
          - os: Windows
            python-version: '3.8'

    runs-on: ${{ matrix.os }}-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install poetry
        run: pipx install poetry

      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: poetry

      - name: Install dependencies
        run: poetry install --without dev --without docs

      - name: Run tests
        run: poetry run pytest -v

  build:
    name: Build distribution
    runs-on: ubuntu-latest
    needs: [code-quality, run-tests]
    steps:
      - uses: actions/checkout@v3

      - name: Install poetry
        run: pipx install poetry

      - uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Build package
        run: poetry build

      - name: Store the distribution packages
        if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags')
        uses: actions/upload-artifact@v3
        with:
          name: python-package-distributions
          path: dist/

  pypi-publish:
    name: Upload release to PyPI
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags')
    needs: [build]
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/poethepoet
    permissions:
      id-token: write
    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v3
        with:
          name: python-package-distributions
          path: dist/

      - name: Publish distribution 📦 to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1

  homebrew-publish:
    name: Upload homebrew formula
    needs: [pypi-publish]
    runs-on: ubuntu-latest
    steps:
      - name: Trigger update of homebrew formula
        run: >
          curl -L -X POST
          -H "Accept: application/vnd.github+json"
          -H "Authorization: Bearer ${{ secrets.homebrew_pat }}"
          -H "X-GitHub-Api-Version: 2022-11-28"
          https://api.github.com/repos/nat-n/homebrew-poethepoet/actions/workflows/71211730/dispatches
          -d '{"ref":"main", "inputs":{}}'

  github-release:
    name: >-
      Sign the Python 🐍 distribution 📦 with Sigstore and upload them to GitHub Release
    needs: [pypi-publish]
    runs-on: ubuntu-latest

    permissions:
      contents: write
      id-token: write

    steps:
    - name: Download all the dists
      uses: actions/download-artifact@v3
      with:
        name: python-package-distributions
        path: dist/
    - name: Sign the dists with Sigstore
      uses: sigstore/gh-action-sigstore-python@v1.2.3
      with:
        inputs: >-
          ./dist/*.tar.gz
          ./dist/*.whl
    - name: Upload artifact signatures to GitHub Release
      env:
        GITHUB_TOKEN: ${{ github.token }}
      # Upload to GitHub Release using the `gh` CLI.
      # `dist/` contains the built packages, and the
      # sigstore-produced signatures and certificates.
      run: >-
        gh release upload
        '${{ github.ref_name }}' dist/**
        --repo '${{ github.repository }}'
